
services:
  kafka:
    image: 'bitnami/kafka:latest'
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_CONTROLLER_BROKER_ID=0
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:14
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: salesdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d salesdb"]
      interval: 30s
      timeout: 10s
      retries: 3

  db-init:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    command: ["/app/scripts/init-db.sh"]
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=salesdb
      - POSTGRES_HOST=postgres
    restart: on-failure

  data_producers:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
    restart: on-failure
    command: ["/app/scripts/start-producers.sh"]
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  spark:
    build:
      context: ./spark_jobs
      dockerfile: Dockerfile
    container_name: spark
    ports:
      - "7077:7077"
      - "8080:8080"
    environment:
      - SPARK_MODE=master
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=salesdb
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      data_producers:
        condition: service_started
    restart: on-failure

  superset:
    image: apache/superset
    container_name: superset
    environment:
      - SUPERSET_SECRET_KEY=your-secret-key-here
      - ADMIN_USERNAME=admin
      - ADMIN_EMAIL=admin@superset.com
      - ADMIN_PASSWORD=admin
    ports:
      - "8088:8088"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - superset_home:/app/superset_home
    command:
      - bash
      - -c
      - |
        superset db upgrade &&
        superset fab create-admin --username admin --firstname Admin --lastname User --email admin@superset.com --password admin || true &&
        superset init &&
        superset run -p 8088 --host=0.0.0.0

volumes:
  superset_home:
  postgres_data:
